package com.atmate.portal.gateway.atmategateway.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.cors.CorsConfigurationSource;
// O CorsFilter pode n√£o ser mais necess√°rio se o Spring Security aplicar a configura√ß√£o
// import org.springframework.web.filter.CorsFilter;

import java.util.List;

@Configuration
public class CorsConfig {

    /**
     * Define a fonte de configura√ß√£o CORS como um Bean.
     * O Spring Security (via http.cors()) ir√° detetar e usar este Bean automaticamente.
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();

        // üîê Permitir credenciais (necess√°rio para cookies, Auth headers, etc.)
        config.setAllowCredentials(true);

        // üåç !!! IMPORTANTE: DEFINIR A ORIGEM EXATA DO FRONTEND !!!
        // Substitua "http://localhost:5173" pela URL exata onde o seu React App corre.
        // Adicione outras URLs de produ√ß√£o se necess√°rio. N√ÉO USE "*" com allowCredentials=true.
        config.setAllowedOrigins(List.of(
                "http://localhost:5173" // <--- VERIFIQUE E AJUSTE ESTA URL
                , "http://atmate.sytes.net/"
                , "http://atmate.sytes.net:4173/"// Exemplo produ√ß√£o
                , "http://85.241.132.174/"
                , "https://atmate.online/"
        ));
        // config.setAllowedOriginPatterns(List.of("*")); // <-- REMOVER/COMENTAR

        // ‚úÖ M√©todos HTTP permitidos
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH"));

        // ‚úÖ Cabe√ßalhos permitidos (* √© geralmente aceit√°vel aqui)
        config.setAllowedHeaders(List.of("*"));

        // ‚úÖ Cabe√ßalhos expostos na resposta que o frontend pode ler
        config.setExposedHeaders(List.of("Authorization", "Content-Type")); // Adicione outros se precisar

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        // Aplica esta configura√ß√£o a todos os paths ("/**")
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    // --- O Bean CorsFilter provavelmente j√° N√ÉO √© necess√°rio ---
    // O Spring Security aplicar√° a configura√ß√£o definida em corsConfigurationSource()
    // Comente ou remova este Bean se estiver a usar http.cors() no SecurityConfig.
    /*
    @Bean
    public CorsFilter corsFilter() {
        return new CorsFilter(corsConfigurationSource());
    }
    */
}