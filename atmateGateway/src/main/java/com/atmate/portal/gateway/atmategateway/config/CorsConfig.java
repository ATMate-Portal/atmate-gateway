package com.atmate.portal.gateway.atmategateway.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.cors.CorsConfigurationSource;
import java.util.List;

@Configuration
public class CorsConfig {

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();

        // üîê Permitir credenciais (importante se usar cookies, tokens de autentica√ß√£o, etc.)
        config.setAllowCredentials(true);

        // üåç !!! DEFINIR AS ORIGENS PERMITIDAS !!!
        // Apenas as URLs EXATAS do seu frontend (local e produ√ß√£o).
        // N√ÉO use "*" com allowCredentials=true.
        config.setAllowedOrigins(List.of(
                "http://localhost:5173",  // <--- Mantenha esta para desenvolvimento local do React (ajuste a porta se for diferente)
                "https://atmate.online"   // <--- ESTA √â A URL DE PRODU√á√ÉO DO SEU FRONTEND (sem barra no final √© mais comum)
                // Remova as URLs antigas (sytes.net, IP direto) pois n√£o s√£o mais necess√°rias ou seguras nesta configura√ß√£o.
        ));

        // ‚úÖ M√©todos HTTP permitidos
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH"));

        // ‚úÖ Cabe√ßalhos permitidos (* √© geralmente aceit√°vel aqui, mas pode ser mais restrito se preferir)
        config.setAllowedHeaders(List.of("*"));

        // ‚úÖ Cabe√ßalhos expostos na resposta que o frontend pode ler
        config.setExposedHeaders(List.of("Authorization", "Content-Type")); // Adicione outros se precisar

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        // Aplica esta configura√ß√£o a todos os paths ("/**") da sua API
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    // O CorsFilter geralmente n√£o √© necess√°rio se estiver a usar Spring Security com http.cors(),
    // pois ele usar√° o Bean corsConfigurationSource() acima.
    /*
    @Bean
    public CorsFilter corsFilter() {
        return new CorsFilter(corsConfigurationSource());
    }
    */
}